{"version":3,"sources":["components/Icon.js","App.js","index.js"],"names":["Icon","name","className","itemArray","Array","fill","App","useState","isCross","setIsCross","winMessage","setWinMessage","changeItem","itemNumber","toast","type","Container","position","Row","Col","md","Button","color","block","onClick","map","item","index","Card","CardBody","ReactDOM","render","document","getElementById"],"mappings":"8LAeeA,EAZF,SAAC,GAEV,OADJ,EADeC,MAIP,IAAK,SACD,OAAO,cAAC,IAAD,CAAaC,UAAU,SAClC,IAAK,QACD,OAAO,cAAC,IAAD,CAASA,UAAU,SAC9B,QACI,OAAO,cAAC,IAAD,CAAOA,UAAU,W,+DCA9BC,G,YAAY,IAAIC,MAAM,GAAGC,KAAK,UA0GrBC,EAxGH,WAER,MAA+BC,oBAAS,GAAxC,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAAoCF,mBAAS,IAA7C,mBAAOG,EAAP,KAAmBC,EAAnB,KA6CMC,EAAa,SAAAC,GAEf,OAAGH,EAEQI,YAAMJ,EAAY,CAACK,KAAK,YAGN,UAA1BZ,EAAUU,GAOFC,YAAM,iBAAkB,CAACC,KAAK,WALrCZ,EAAUU,GAAcL,EAAU,QAAU,SAC5CC,GAAYD,QA5CZL,EAAU,KAAOA,EAAU,IAAQA,EAAU,KAAOA,EAAU,IAAuB,UAAfA,EAAU,GAEhFQ,EAAc,IAAD,OAAKR,EAAU,GAAf,UAETA,EAAU,KAAOA,EAAU,IAAMA,EAAU,KAAOA,EAAU,IAAqB,UAAfA,EAAU,GAEhFQ,EAAc,GAAD,OAAIR,EAAU,GAAd,UAETA,EAAU,KAAOA,EAAU,IAAMA,EAAU,KAAOA,EAAU,IAAqB,UAAfA,EAAU,GAEhFQ,EAAc,GAAD,OAAIR,EAAU,GAAd,UAETA,EAAU,KAAOA,EAAU,IAAMA,EAAU,KAAOA,EAAU,IAAqB,UAAfA,EAAU,GAEhFQ,EAAc,GAAD,OAAIR,EAAU,GAAd,UAETA,EAAU,KAAOA,EAAU,IAAMA,EAAU,KAAOA,EAAU,IAAqB,UAAfA,EAAU,GAEhFQ,EAAc,GAAD,OAAIR,EAAU,GAAd,UAETA,EAAU,KAAOA,EAAU,IAAMA,EAAU,KAAOA,EAAU,IAAqB,UAAfA,EAAU,GAEhFQ,EAAc,GAAD,OAAIR,EAAU,GAAd,UAETA,EAAU,KAAOA,EAAU,IAAMA,EAAU,KAAOA,EAAU,IAAqB,UAAfA,EAAU,GAEhFQ,EAAc,GAAD,OAAIR,EAAU,GAAd,UAETA,EAAU,KAAOA,EAAU,IAAMA,EAAU,KAAOA,EAAU,IAAqB,UAAfA,EAAU,IAEhFQ,EAAc,GAAD,OAAIR,EAAU,GAAd,aAyBrB,OACG,eAACa,EAAA,EAAD,CAAWd,UAAU,MAArB,UACI,cAAC,IAAD,CAAgBe,SAAS,kBACzB,cAACC,EAAA,EAAD,UACI,eAACC,EAAA,EAAD,CAAKC,GAAI,EAAGlB,UAAU,cAAtB,UACKQ,EACG,sBAAKR,UAAU,YAAf,UACI,oBAAIA,UAAU,0CAAd,SACKQ,IAEL,cAACW,EAAA,EAAD,CAAQC,MAAM,UAAUC,OAAK,EAACC,QA1ElC,WAEff,GAAW,GACXE,EAAc,IACdR,EAAUE,KAAK,QAAS,EAAG,IAsER,gCAKJ,qBAAIH,UAAU,2BAAd,UACKM,EAAU,QAAU,SADzB,YAIJ,qBAAKN,UAAU,OAAf,SACKC,EAAUsB,KAAK,SAACC,EAAMC,GAAP,OACZ,cAACC,EAAA,EAAD,CAAMN,MAAM,UAAWE,QAAU,kBAAMZ,EAAWe,IAAlD,SACI,cAACE,EAAA,EAAD,CAAU3B,UAAU,MAApB,SACI,cAAC,EAAD,CAAMD,KAAMyB,sBCrG/CI,IAASC,OAAQ,cAAE,EAAF,IAAUC,SAASC,eAAe,W","file":"static/js/main.5294c505.chunk.js","sourcesContent":["import React from 'react';\r\nimport {FaTimes, FaPen, FaRegCircle} from 'react-icons/fa';\r\n\r\nconst Icon = ({name}) => \r\n{\r\n    switch(name)\r\n    {\r\n        case \"circle\":\r\n            return <FaRegCircle className=\"icon\"/>;\r\n        case \"cross\":\r\n            return <FaTimes className=\"icon\"/>;\r\n        default:\r\n            return <FaPen className=\"icon\"/>;\r\n    }\r\n};\r\nexport default Icon;","import React, {useState} from 'react'; //react\r\n\r\nimport Icon from \"./components/Icon\"; //icon\r\n\r\nimport { ToastContainer, toast } from 'react-toastify'; // toastify from react-toastify\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nimport {Card, CardBody, Container, Button, Col, Row} from 'reactstrap'; // bootstrap\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\n\r\nimport \"./App.css\"; // css\r\n\r\nconst itemArray = new Array(9).fill(\"empty\") //array\r\n\r\nconst App = () => {\r\n\r\n    const [isCross, setIsCross ] = useState(false);\r\n    const [winMessage, setWinMessage] = useState(\"\");\r\n\r\n    const reloadGame = () =>\r\n    {\r\n        setIsCross(false);\r\n        setWinMessage(\"\");\r\n        itemArray.fill(\"empty\", 0, 9);\r\n    };\r\n\r\n    const checkIsWinner = () =>\r\n    {\r\n        if((itemArray[0] === itemArray[1]) && (itemArray[1] === itemArray[2]) && (itemArray[0]!==\"empty\"))\r\n        {\r\n            setWinMessage(` ${itemArray[0]} wins`); \r\n        }\r\n        else if(itemArray[3] === itemArray[4] && itemArray[4] === itemArray[5] && itemArray[3]!==\"empty\")\r\n        {\r\n            setWinMessage(`${itemArray[3]} wins`);\r\n        }\r\n        else if(itemArray[6] === itemArray[7] && itemArray[7] === itemArray[8] && itemArray[6]!==\"empty\")\r\n        {\r\n            setWinMessage(`${itemArray[6]} wins`);\r\n        }\r\n        else if(itemArray[0] === itemArray[3] && itemArray[3] === itemArray[6] && itemArray[0]!==\"empty\")\r\n        {\r\n            setWinMessage(`${itemArray[0]} wins`);\r\n        }\r\n        else if(itemArray[1] === itemArray[4] && itemArray[4] === itemArray[7] && itemArray[1]!==\"empty\")\r\n        {\r\n            setWinMessage(`${itemArray[1]} wins`);\r\n        }\r\n        else if(itemArray[2] === itemArray[5] && itemArray[5] === itemArray[8] && itemArray[2]!==\"empty\")\r\n        {\r\n            setWinMessage(`${itemArray[2]} wins`);\r\n        }\r\n        else if(itemArray[0] === itemArray[4] && itemArray[4] === itemArray[8] && itemArray[0]!==\"empty\")\r\n        {\r\n            setWinMessage(`${itemArray[0]} wins`);\r\n        }\r\n        else if(itemArray[2] === itemArray[4] && itemArray[4] === itemArray[6] && itemArray[2]!==\"empty\")\r\n        {\r\n            setWinMessage(`${itemArray[2]} wins`);\r\n        } \r\n    };\r\n\r\n    const changeItem = itemNumber =>\r\n    {\r\n        if(winMessage)\r\n        {\r\n            return toast(winMessage, {type:\"success\"});\r\n        }\r\n\r\n        if(itemArray[itemNumber] === \"empty\")\r\n        {\r\n            itemArray[itemNumber] = isCross ? \"cross\" : \"circle\";\r\n            setIsCross(!isCross)\r\n\r\n        }\r\n        else{\r\n            return toast(\"already filled\", {type:\"error\"})\r\n        }\r\n\r\n        checkIsWinner();\r\n    };\r\n\r\n\r\n    return (\r\n       <Container className=\"p-5\">\r\n           <ToastContainer position=\"bottom-center\"/>\r\n           <Row>\r\n               <Col md={6} className=\"offset-md-3\">\r\n                   {winMessage ? (\r\n                       <div className=\"mb-2 mt-2\">\r\n                           <h1 className=\"text-success text-uppercase text-center\">\r\n                               {winMessage}\r\n                           </h1>\r\n                           <Button color=\"success\" block onClick={reloadGame}>\r\n                            Reload the Game\r\n                            </Button>\r\n                       </div>\r\n                   ) : (\r\n                       <h1 className=\"text-center text-warning\">\r\n                           {isCross ? \"Cross\" : \"Circle\" } turns \r\n                       </h1>\r\n                   ) }\r\n                   <div className=\"grid\">\r\n                       {itemArray.map( (item, index) => (\r\n                           <Card color=\"warning\"  onClick={ () => changeItem(index) }>\r\n                               <CardBody className=\"box\">\r\n                                   <Icon name={item} />\r\n                               </CardBody>\r\n                           </Card>\r\n                       ))}\r\n                   </div>\r\n                </Col>\r\n           </Row>\r\n           </Container>\r\n\r\n    );\r\n};\r\n\r\nexport default App;","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from \"./App\"\r\n\r\n\r\nReactDOM.render( < App/> , document.getElementById('root'))"],"sourceRoot":""}